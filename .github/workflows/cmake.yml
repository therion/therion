name: CMake
on: [push, pull_request]
jobs:
  Ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - { os: ubuntu-18.04, toolchain: gcc.cmake,              args: ""                                                }
          - { os: ubuntu-20.04, toolchain: gcc.cmake,              args: "-DENABLE_CLANG_TIDY=ON -DCMAKE_BUILD_TYPE=Debug" }
          - { os: ubuntu-20.04, toolchain: clang-sanitizers.cmake, args: ""                                                }
    steps:
      - uses: actions/checkout@v2
      - name: install dependencies
        run: |
          sudo apt -qq update
          sudo apt install -y texlive-binaries texlive-metapost libproj-dev libshp-dev libwxgtk3.0-gtk3-dev libvtk7-dev survex imagemagick ghostscript ninja-build clang-tidy gettext
      - name: install additional texlive languages
        if: matrix.toolchain == 'clang-sanitizers.cmake'
        run:  sudo apt install -y texlive-lang-czechslovak texlive-lang-cyrillic
      - name: Configure CMake
        run: |
          mkdir build && cd build && \
          cmake -G Ninja \
                -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/${{ matrix.toolchain }} \
                -DCMAKE_CXX_FLAGS="-Werror" \
                -DUSE_BUNDLED_SHAPELIB=OFF \
                ${{ matrix.args }} ..
      - run: cmake --build build
      - run: cmake --build build -t test
      - name: Run samples
        if: matrix.toolchain == 'clang-sanitizers.cmake'
        run: cmake --build build -t samples-verify-crc
      - name: Install
        run: sudo cmake --build build -t install

  macOS:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-10.15, macos-11, macos-12]
    steps:
      - uses: actions/checkout@v2
      - name: install dependencies
        run: |
          brew update
          brew tap homebrew/core
          rm /usr/local/bin/2to3
          brew install wxwidgets vtk proj xquartz ninja
      - name: Configure CMake
        run: |
          mkdir build && cd build && cmake -G Ninja -DCMAKE_CXX_FLAGS="-Werror" -DOPENGL_gl_LIBRARY:FILEPATH=/opt/X11/lib/libGL.dylib -DOPENGL_glu_LIBRARY:FILEPATH=/opt/X11/lib/libGLU.dylib -DBUILD_THBOOK=OFF ..
      - run: cmake --build build -t therion loch utest
      - run: cmake --build build -t test
      - name: Install
        run: cmake --build build -t install

  Windows:
    runs-on: windows-latest
    strategy:
      matrix:
        config:
          - { msystem: MINGW64, arch: x86_64 }
          - { msystem: MINGW32, arch: i686   }
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.config.msystem }}
          update: true
          install: make git mingw-w64-${{ matrix.config.arch }}-cmake mingw-w64-${{ matrix.config.arch }}-proj mingw-w64-${{ matrix.config.arch }}-shapelib mingw-w64-${{ matrix.config.arch }}-vtk mingw-w64-${{ matrix.config.arch }}-wxWidgets mingw-w64-${{ matrix.config.arch }}-gcc mingw-w64-${{ matrix.config.arch }}-make mingw-w64-${{ matrix.config.arch }}-bwidget mingw-w64-${{ matrix.config.arch }}-fmt mingw-w64-${{ matrix.config.arch }}-catch
      - run: mkdir build && cd build && cmake -G "MSYS Makefiles" -DCMAKE_CXX_FLAGS="-Werror" -DUSE_BUNDLED_SHAPELIB=OFF -DUSE_BUNDLED_CATCH2=OFF -DUSE_BUNDLED_FMT=OFF -DBUILD_THBOOK=OFF ..
      - run: cmake --build build -t therion loch utest -- -j 4
      - run: cmake --build build -t deploy -- -j 4

  MXE:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
#          - { os: ubuntu-18.04, osname: bionic, pkg: i686,   cmd: i686,   wine-pkg: wine32, wine: wine }
#          - { os: ubuntu-18.04, osname: bionic, pkg: x86-64, cmd: x86_64, wine-pkg: wine64, wine: wine64-stable }
          - { os: ubuntu-20.04, osname: focal, pkg: i686,   cmd: i686,   wine-pkg: wine32, wine: wine }
          - { os: ubuntu-20.04, osname: focal, pkg: x86-64, cmd: x86_64, wine-pkg: wine64, wine: wine64-stable }
    steps:
      - uses: actions/checkout@v2
      - name: install dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 86B72ED9
          sudo add-apt-repository 'deb [arch=amd64] https://mirror.mxe.cc/repos/apt ${{ matrix.osname }} main'
          sudo apt -qq update
          sudo apt install -y --allow-downgrades libpcre2-8-0=10.34-7
          sudo apt install -y ${{ matrix.wine-pkg }}
          sudo apt install -y ninja-build
          sudo apt install -y mxe-${{ matrix.pkg }}-w64-mingw32.static-binutils mxe-${{ matrix.pkg }}-w64-mingw32.static-bzip2 mxe-${{ matrix.pkg }}-w64-mingw32.static-expat mxe-${{ matrix.pkg }}-w64-mingw32.static-freetype-bootstrap mxe-${{ matrix.pkg }}-w64-mingw32.static-gcc mxe-${{ matrix.pkg }}-w64-mingw32.static-gettext mxe-${{ matrix.pkg }}-w64-mingw32.static-glib mxe-${{ matrix.pkg }}-w64-mingw32.static-harfbuzz mxe-${{ matrix.pkg }}-w64-mingw32.static-jpeg \
                              mxe-${{ matrix.pkg }}-w64-mingw32.static-libiconv mxe-${{ matrix.pkg }}-w64-mingw32.static-libpng mxe-${{ matrix.pkg }}-w64-mingw32.static-tiff mxe-${{ matrix.pkg }}-w64-mingw32.static-vtk mxe-${{ matrix.pkg }}-w64-mingw32.static-wxwidgets mxe-${{ matrix.pkg }}-w64-mingw32.static-xz mxe-${{ matrix.pkg }}-w64-mingw32.static-zlib mxe-${{ matrix.pkg }}-w64-mingw32.static-proj
      - name: run build
        run: |
          export PATH=/usr/lib/mxe/usr/bin:$PATH
          mkdir build && cd build
          ${{ matrix.cmd }}-w64-mingw32.static-cmake -G Ninja \
              -DMXE_USE_CCACHE=OFF \
              -DCMAKE_CROSSCOMPILING_EMULATOR=${{ matrix.wine }} \
              -DCMAKE_CXX_FLAGS="-Werror" \
              -DBUILD_SHARED_LIBS=OFF \
              -DBUILD_THBOOK=OFF ..
          ninja
